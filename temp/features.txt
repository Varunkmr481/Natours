    BUILD QUERY

    1.1 Basic Filtering
    const queryObj = {...req.query};
    const excludedFields = ['page' , 'sort' , 'limit' , 'fields'];
    excludedFields.forEach(el => delete queryObj[el] );
    console.log(req.query , queryObj);

    1.2 Advanaced filtering
    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(/\b(gt|gte|lte|lt)\b/g, function(match){return `$${match}`});
    console.log(JSON.parse(queryStr));

    let query = Tour.find(JSON.parse(queryStr));

    2. Sorting
    if(req.query.sort){
    const sortBy = req.query.sort.split(',').join(' ');
    query = query.sort(sortBy);
    }else{
    changed -createdAt to _id due to improper pagination results
      query = query.sort('_id');
    }

    3) Field Limiting
    if(req.query.fields){
      let fields = req.query.fields.split(',').join(' ');
      query = query.select(fields)
    }else{
      query = query.select('-__v');
    }

    4) Pagination
    const page = req.query.page * 1 || 1 ;
    const limit = req.query.limit * 1 || 100 ;
    const skip = (page - 1) * limit;

    query = query.skip(skip).limit(limit);

    if(req.query.page){
      const numTours = await Tour.countDocuments();
      if(skip >= numTours) throw new Error("This page does not exists!");
    }

    5) Aliasing